group_by(CountryCorrFinal, country_nr) %>%
summarise(coun_gdpep = sum(GDPEP, na.rm = TRUE)) %>%
ungroup()
agrlu <- read_excel(path = "data/raw/copy_locators_hypefinal_Nov2017.xlsx", sheet = "LU") %>%
select(SUBID, Agr) %>%
rename(area_agr = Agr)
demo <- left_join(demo, countries, by = c("CountryCorrFinal" = "country")) %>%
left_join(agrlu, by = c("SC" = "SUBID")) %>%
left_join(country_gdpep, by = c("CountryCorrFinal", "country_nr")) %>%
mutate(frac_GDPEP = GDPEP / coun_gdpep)
conn <- dbConnect(RSQLite::SQLite(), "data/raw/substance_properties.db")
dbListTables(conn)
sub_props <-
dbGetQuery(
conn,
"SELECT ID, CAS, property, value FROM substance_properties WHERE property IN ('Molar mass [Da]', 'log Kow', 'Kbiodeg [1/s]', 'Ks')"
) %>%
mutate(value = as.numeric(value)) %>%
filter(CAS %in% measurements$CAS_No) %>%
spread(key = property, value = value) %>%
select(CAS, `Kbiodeg [1/s]`, `log Kow`, `Molar mass [Da]`, Ks) %>%
group_by(CAS) %>%
summarise(
molar_mass = mean(`Molar mass [Da]`, na.rm = TRUE),
log_kow = mean(`log Kow`, na.rm = TRUE),
kbiodeg = mean(`Kbiodeg [1/s]`, na.rm = TRUE),
ks = mean(Ks, na.rm = TRUE)
) %>%
ungroup()
sub_groups <- dbGetQuery(
conn,
"SELECT CAS, CODE FROM substances"
) %>%
filter(CAS %in% measurements$CAS_No) %>%
mutate(CODE = tolower(CODE)) %>%
mutate(pest = str_detect(CODE, "pest"),
pharma = str_detect(CODE, "pharma"),
reach = str_detect(CODE, "reach")
) #%>%
# select(-CODE)
sub_groups <- sub_groups[!duplicated(sub_groups$CAS), ]
# Joining data  -----------------------------------------------------------
data_tot <-
left_join(measurements_mapping,
measurements ,
by = c("station_co" = "Station_Code")) %>%
left_join(geo_hydro, by = "SUBID") %>%
left_join(catch, by = "SUBID") %>%
left_join(demo, by = c("SUBID" = "SC")) %>%
left_join(sub_props, by = c("CAS_No" = "CAS")) %>%
left_join(sub_groups, by = c("CAS_No" = "CAS"))
subs_out <-
c(
"14798-03-9",
"7440-38-2",
"16887-00-6",
"7440-47-3",
"7440-50-8",
"64-85-7",
"7439-92-1",
"7439-95-4",
"7439-97-6",
"7440-02-0",
"7697-37-2",
"14797-65-0",
"17778-88-0",
"7723-14-0",
"7440-09-7",
"7440-23-5",
"14808-79-8",
"7440-66-6",
"7440-70-2",
"7440-43-9"
)
data <- data_tot %>%
select(
HAROID,
MAINDOWN,
SUBID,
CountryCorrFinal,
country_nr,
LAKEREGION,
REGION,
WQPARREG,
POURX,
POURY,
TARGETX,
TARGETY,
CENTERX,
CENTERY,
LATITUDE,
LONGITUDE,
station_co,
Substance,
CAS_No,
H_Unit,
Concentration,
subs_value,
valid_measurement,
kbiodeg,
log_kow,
molar_mass,
ks,
reach,
pest,
pharma,
AREA,
area_agr,
UPAREA,
RIVLEN,
ELEV_MEAN,
ELEV_STD,
SLOPE_MEAN,
RELIEF,
SLC_1:CumCat_km2,
GDPEP,
frac_GDPEP,
distance_t,
CumAreakkm2
) %>%
mutate(
# recalculating units to one standard #
subs_value = case_when(
H_Unit == "mg/l" ~ subs_value * 1000,
H_Unit == "mg/kg" ~ subs_value * 1000,
TRUE ~ subs_value
),
H_Unit = case_when(H_Unit == "mg/l" ~ "µg/l",
H_Unit == "mg/kg" ~ "µg/kg",
TRUE ~ H_Unit)
) %>%
filter(H_Unit != "µg/kg", !CAS_No %in% subs_out)
# removing missing measurement
data <- data[!is.na(data$subs_value), ]
# calculate fraction agricultural are for each subid #
data <- mutate(data, f_agr = area_agr / AREA,
SUBID = as.character(SUBID))
# adding flag for substances that belong to multiple groups
data$mult_groups <- rowSums(data[,c('reach', 'pharma', 'pest')], na.rm = TRUE)
# making sure that every substance only belongs to one group using priorities #
data <-
mutate(
data,
reach_bin = if_else(reach == TRUE & mult_groups == 1, 1 , 0),
pharma_bin = if_else(
pharma == TRUE & mult_groups == 1 | pharma == TRUE & pest != TRUE & mult_groups > 1,
1 , 0),
pest_bin = if_else(pest == TRUE, 1 , 0, missing = 0)
)
# making on column for the groups
data$sub_groups <- case_when(data$reach_bin == 1 ~ "reach",
data$pharma_bin == 1 ~ " pharma",
data$pest_bin == 1 ~ "pest")
## test for epa substance properties ##
data <- select(data, -kbiodeg:-ks)
epa_props <- read_rds("data/modified/subs_data.rds")
data <- left_join(data, epa_props, by = c("CAS_No" = "CAS"))
##  ##
# Obtaining emissions data ------------------------------------------------
emission_files <- list.files(path = "data/raw/emission-data/", pattern ="*(.mes|.dbg)", full.names = TRUE)
emission_data <- NULL
# file <- "data/raw/emission-data/espaceCAS_100-41-4.dbg"
for (file in emission_files) {
cas <- str_extract(basename(file), "\\d{1,}-\\d{1,2}-\\d{1}")
df <-
read_table2(
file = file,
skip = 2,
col_names = FALSE,
col_types =  cols(X1 = col_integer(),
X2 = col_double(),
X3 = col_double())
)
skip <- which(is.na(df$X1))
df <- df[-c(1:skip[2]), ]
colnames(df) <- c("country_nr" ,"emission_air_raw", "emission_water_raw", "emission_ww_raw", "emission_soil_raw", "unknown")
df$cas <- cas
emission_data <- bind_rows(emission_data, df)
}
# cleaning and joining emission data #
emission_data <- select(emission_data, country_nr, cas, emission_air_raw:emission_soil_raw) %>%
group_by(country_nr, cas) %>%
summarise(emission_air_raw = mean(emission_air_raw, na.rm = TRUE),
emission_water_raw = mean(emission_water_raw, na.rm = TRUE),
emission_ww_raw =  mean(emission_ww_raw, na.rm = TRUE),
emission_soil_raw = mean(emission_soil_raw, na.rm = TRUE)) %>%
ungroup()
data <- left_join(data, emission_data, by = c("country_nr" = "country_nr" , "CAS_No" = "cas"))
# test imputation emission data # #######
data_names <-
select(
data,
SUBID,
CAS_No,
GDPEP,
emission_air_raw,
emission_water_raw,
emission_ww_raw,
emission_soil_raw,
molw:vapore_pressure
) %>% distinct() %>% is.na() %>%
colSums() %>%
sort(decreasing = FALSE) %>%
names()
data_imp <- select(data, data_names) %>% distinct() %>% VIM::kNN(
k = 5,
numFun = weighted.mean,
weightDist = TRUE,
imp_var = FALSE
) %>%
select(-GDPEP)
data <-
select(data,
-emission_air_raw,
-emission_water_raw,
-emission_ww_raw,
-emission_soil_raw,
-molw:-vapore_pressure)
data <- left_join(data, data_imp)
############
# calculating emissions based on substance group #
data <- mutate(
data,
emission_air = case_when(
pest_bin == 1 ~ emission_air_raw * f_agr,
pest_bin != 1 ~ emission_air_raw * frac_GDPEP
),
emission_water = case_when(
pest_bin == 1 ~ emission_water_raw * f_agr,
pest_bin != 1 ~ emission_water_raw * frac_GDPEP
),
emission_ww = case_when(
pest_bin == 1 ~ emission_ww_raw * f_agr,
pest_bin != 1 ~ emission_ww_raw * frac_GDPEP
),
emission_soil = case_when(
pest_bin == 1 ~ emission_soil_raw * f_agr,
pest_bin != 1 ~ emission_soil_raw * frac_GDPEP
)
)
# collect lowest detection limits per substance #
dls <- filter(data, Concentration == "Less than LoD") %>%
group_by(CAS_No) %>%
summarise(lowest_dl = min(subs_value, na.rm = TRUE)) %>%
ungroup()
data <- left_join(data, dls)
data <- mutate(
data,
Concentration = if_else(subs_value == 0,
"Less than LoD",
Concentration, missing = Concentration),
subs_value = if_else(
subs_value == 0 & !is.na(lowest_dl),
lowest_dl,
subs_value,
missing = subs_value
)
) %>% select(-lowest_dl)
# Impute censored data ----------------------------------------------------
unique(data$Concentration)
data$censored <- data$Concentration %in% c("Less than LoQ", "Less than LoD")
(frac_censored <- select(data, CAS_No, censored) %>%
group_by(CAS_No) %>%
summarise(percent = mean(censored, na.rm = TRUE),
n = n()) %>%
arrange(desc(percent)))
select(data, CAS_No, station_co, censored) %>%
group_by(CAS_No, station_co) %>%
summarise(percent = mean(censored, na.rm = TRUE),
n = n()) %>%
arrange(desc(percent))
# select substances with lower then 80 percent of the values below dl
valid_subs <- filter(frac_censored, percent < 0.8)
valid_subs <- valid_subs$CAS_No
# filter data with substances with less then 80 percent of the values below dl #
data <- filter(data, CAS_No %in% valid_subs)
# # total #
#
# data$waarde <- data$subs_value
# data$waarde[data$waarde == 0] <- NA
#
# data_cen <- arrange(data, waarde) %>%
#   mutate(id = 1:nrow(data))
#
#
# ros_mod <- ros(data$waarde, data$censored, forwardT = "log", reverseT = "exp")
# ros_df <- as.data.frame(ros_mod)
#
# ros_df <- mutate(ros_df, id = 1:nrow(ros_df)) %>%
#   select(-pp)
#
# ros_imp <- ros_df$modeled
#
# # joining the imputed values to the data #
# data_cen <- left_join(data_cen, ros_df, by = c("id", "subs_value" = "obs", "censored")) %>%
#   rename(subs_value_dl = modeled)
#
# # replace NA values with original #
# data_cen <- mutate(data_cen, subs_value_dl = case_when(is.na(subs_value_dl) ~ subs_value,
#                                                        TRUE ~ subs_value_dl)) %>%
#   select(-waarde, -id)
#
# # data_sub$subs_value_dl <- ros_imp
#
# # check if values align #
# filter(data_cen, censored == FALSE) %>%
#   mutate(correct =subs_value == subs_value_dl) %>%
#   summarise(correct_pct = mean(correct))
## ##
#
#
# impute with ROS per substance #
data_cen <- NULL
substances <- unique(data$CAS_No)
# sub <- "120-18-3"
for (sub in substances) {
data_sub <- filter(data, CAS_No == sub) %>%
arrange(subs_value)
data_sub$waarde <- data_sub$subs_value
data_sub$waarde[data_sub$waarde == 0] <- NA
data_sub <- arrange(data_sub, waarde) %>%
mutate(id = 1:nrow(data_sub))
if(mean(data_sub$censored) == 1){
data_sub$subs_value_dl <- as.numeric(NA)
# next
}
else{
# impute #
ros_mod <- ros(data_sub$waarde, data_sub$censored, forwardT = "log", reverseT = "exp")
ros_df <- as.data.frame(ros_mod)
ros_df <- mutate(ros_df, id = 1:nrow(ros_df)) %>%
select(-pp)
ros_imp <- ros_df$modeled
# joining the imputed values to the data #
data_sub <- left_join(data_sub, ros_df, by = c("id", "subs_value" = "obs", "censored")) %>%
rename(subs_value_dl = modeled)
}
# replace NA values with original #
data_sub <- mutate(data_sub, subs_value_dl = case_when(is.na(subs_value_dl) ~ subs_value,
TRUE ~ subs_value_dl)) %>%
select(-waarde, -id)
# data_sub$subs_value_dl <- ros_imp
# check if values align #
filter(data_sub, censored == FALSE) %>%
mutate(correct = subs_value == subs_value_dl) %>%
summarise(correct_pct = mean(correct))
# binding it together #
data_cen <- bind_rows(data_cen, data_sub)
}
# creating intermediate datset #
data_intermediate <- data
# saving the total data with censored obs.#
data <- data_cen
# create data for later use #
data <- select(
data,
-HAROID,
-REGION,
-MAINDOWN,
-LAKEDATAID,
-LAKE_DEPTH,  # always the same
-ICATCH,  # always the same
-loc_sp,
-loc_in,
-frac_GDPEP,
-f_agr,
-emission_air_raw,
-emission_water_raw,
-emission_ww_raw,
-emission_soil_raw,
-mult_groups,
-reach,
-pest,
-pharma,
-drydep_n2,  # drydep_n1 & drydep_n2 are the same?
-WQPARREG,  # always the same
-DHSLC_3,  # only 0 values for the variables below
-SLC_3,
-SLC_23,
-SLC_26,
-SLC_32,
-SLC_33,
-SLC_35,
-SLC_36,
-SLC_41,
-SLC_51,
-SLC_53,
-SLC_54,
-SLC_56,
-SLC_57,
-SLC_58,
-SLC_59,
-SLC_60,
-SLC_66,
-SLC_70,
-SLC_74,
-SLC_75
)
#miss_var_summary(data)
data$subs_value_dl[data$subs_value_dl == 0]
data$subs_value_dl[data$subs_value_dl == 0] <- NA
# for later use #
write_csv2(data, "data/modified/compact_data.csv")
write_rds(data, "data/modified/compact_data.rds")
write_parquet(data, "data/modified/compact_data.parquet")
# Loading libraries -------------------------------------------------------
library(tidyverse)
library(naniar)
library(vtreat)
library(ranger)
library(xgboost)
library(caret)
library(tictoc)
library(h2o)
# Loading data ------------------------------------------------------------
df <- read_rds("data/modified/compact_data.rds") %>%
select(-subs_value) # temporary
# Cleaning data for feature table #
df <- select(df, -SUBID:-Concentration, -valid_measurement, -sub_groups, -censored)  # -subs_value, -censored
?preProcess
# Models with caret -------------------------------------------------------
my_folds <- createFolds(df_train$subs_value_dl, k = 5)
# glmnet #
fit_control <- trainControl(
method = "adaptive_cv",
adaptive = list(
min = 5,
alpha = 0.05,
method = "BT",
complete = TRUE
),
repeats = 3,
search = "random",
verboseIter = TRUE,
savePredictions = TRUE,
index = my_folds,
allowParallel = TRUE
)
glmnet_grid <- expand.grid(
alpha = seq(0, 1, 0.1),
lambda = seq(0.0001, 0.1, length = 10)
)
tic()
glmnet_model <- train(
subs_value_dl ~ .,
data = df_train,
method = "glmnet",
preProcess = c("knnImpute", "pca"),
tuneLength = 100,
trControl = fit_control
)
toc()
# create test and training data #
set.seed(1234)
N <- nrow(df)
target <- round(0.75 * N)
gp <- runif(N)
# splitting the data
df_train <- df[gp < 0.75, ]
df_test <- df[gp >= 0.75, ]
my_folds <- createFolds(df_train$subs_value_dl, k = 5)
my_folds <- createFolds(df_train$subs_value_dl, k = 5)
?createFolds
my_folds <- createFolds(df_train$subs_value_dl, k = 5, na.rm = TRUE)
# glmnet #
fit_control <- trainControl(
method = "adaptive_cv",
adaptive = list(
min = 5,
alpha = 0.05,
method = "BT",
complete = TRUE
),
repeats = 3,
search = "random",
verboseIter = TRUE,
savePredictions = TRUE,
index = my_folds,
allowParallel = TRUE
)
my_folds <- createFolds(df_train$subs_value_dl, k = 5)
# glmnet #
fit_control <- trainControl(
method = "adaptive_cv",
adaptive = list(
min = 5,
alpha = 0.05,
method = "BT",
complete = TRUE
),
repeats = 3,
search = "random",
verboseIter = TRUE,
savePredictions = TRUE,
# index = my_folds,
allowParallel = TRUE
)
glmnet_grid <- expand.grid(
alpha = seq(0, 1, 0.1),
lambda = seq(0.0001, 0.1, length = 10)
)
tic()
glmnet_model <- train(
subs_value_dl ~ .,
data = df_train,
method = "glmnet",
preProcess = c("knnImpute", "pca"),
tuneLength = 100,
trControl = fit_control
)
toc()
source('P:/1209104-solutions/JDS_ML/github_repo_JDS_ML/JDS_ML/emerging_sub_worldbank_R/scripts/Cleaning_data.R', encoding = 'UTF-8', echo=TRUE)
