valid_measurement,
kbiodeg,
log_kow,
molar_mass,
ks,
reach,
pest,
pharma,
AREA,
UPAREA,
RIVLEN,
ELEV_MEAN,
ELEV_STD,
SLOPE_MEAN,
RELIEF,
SLC_1:CumCat_km2,
GDPEP,
distance_t,
CumAreakkm2
) %>%
mutate(
subs_value = case_when(
H_Unit == "mg/l" ~ subs_value * 1000,
H_Unit == "mg/kg" ~ subs_value * 1000,
TRUE ~ subs_value
),
H_Unit = case_when(H_Unit == "mg/l" ~ "µg/l",
H_Unit == "mg/kg" ~ "µg/kg",
TRUE ~ H_Unit)
)
# Kevin Ouwerkerk
# 2019-11-18
# Loading libraries -------------------------------------------------------
library(tidyverse)
library(readxl)
library(RSQLite)
# Loading data ------------------------------------------------------------
geo_hydro <- read_tsv("data/raw/GeoData.txt") %>%
filter(HAROID == 9600704)
geo_hydro
View(geo_hydro)
read_excel("data/raw/NewHypeSchematisation.xlsx", sheet = "CumCat")
catch <- read_excel("data/raw/NewHypeSchematisation.xlsx", sheet = "CumCat") %>%
select(SUBID, CumCat_km2)
read_excel(path = "data/raw/JDS_Query met pivot.xlsx", sheet = "DBQuery")
measurements <-
read_excel(path = "data/raw/JDS_Query met pivot.xlsx", sheet = "DBQuery")
measurements$Sample_Matrix %>% unique()
measurements <-
read_excel(path = "data/raw/JDS_Query met pivot.xlsx", sheet = "DBQuery") %>%
filter(Sample_Matrix == "Water - Surface water", CAS_No != "N/A") %>%
select(
Station_Code,
Substance,
CAS_No,
H_Unit,
Concentration,
`Data value`,
`Valid measurement`
) %>%
rename(subs_value = `Data value`,
valid_measurement = `Valid measurement`)
measurements$H_Unit[measurements$H_Unit == "mg/L"] <- "mg/l"
unique(measurements$H_Unit)
filter(measurements, H_Unit == "µg/kg")
filter(measurements, H_Unit == "µg/kg") %>% select(CAS_No) %>% unique()
measurements <-
read_excel(path = "data/raw/JDS_Query met pivot.xlsx", sheet = "DBQuery") %>%
filter(Sample_Matrix == "Water - Surface water", CAS_No != "N/A", H_Unit != "µg/kg") %>%
select(
Station_Code,
Substance,
CAS_No,
H_Unit,
Concentration,
`Data value`,
`Valid measurement`
) %>%
rename(subs_value = `Data value`,
valid_measurement = `Valid measurement`)
measurements$H_Unit[measurements$H_Unit == "mg/L"] <- "mg/l"
unique(measurements$H_Unit)
measurements <-
read_excel(path = "data/raw/JDS_Query met pivot.xlsx", sheet = "DBQuery") %>%
filter(Sample_Matrix == "Water - Surface water", CAS_No != "N/A") %>%
select(
Station_Code,
Substance,
CAS_No,
H_Unit,
Concentration,
`Data value`,
`Valid measurement`
) %>%
rename(subs_value = `Data value`,
valid_measurement = `Valid measurement`)
measurements$H_Unit[measurements$H_Unit == "mg/L"] <- "mg/l"
measurements_mapping <- read_csv2(file = "data/raw/MappingJDS_Define.csv") %>%
filter(HAROID == 9600704) %>%
select(station_co, SUBID, distance_t, CumAreakkm2)
demo <- read_excel(path = "data/raw/copy_locators_hypefinal_Nov2017.xlsx", sheet = "locators") %>%
select(SC, CountryCorrFinal, GDPEP)
conn <- dbConnect(RSQLite::SQLite(), "data/raw/substance_properties.db")
dbListTables(conn)
sub_props <-
dbGetQuery(
conn,
"SELECT ID, CAS, property, value FROM substance_properties WHERE property IN ('Molar mass [Da]', 'log Kow', 'Kbiodeg [1/s]', 'Ks')"
) %>%
mutate(value = as.numeric(value)) %>%
filter(CAS %in% measurements$CAS_No) %>%
spread(key = property, value = value) %>%
select(CAS, `Kbiodeg [1/s]`, `log Kow`, `Molar mass [Da]`, Ks) %>%
group_by(CAS) %>%
summarise(
molar_mass = mean(`Molar mass [Da]`, na.rm = TRUE),
log_kow = mean(`log Kow`, na.rm = TRUE),
kbiodeg = mean(`Kbiodeg [1/s]`, na.rm = TRUE),
ks = mean(Ks, na.rm = TRUE)
) %>%
ungroup()
sub_groups <- dbGetQuery(
conn,
"SELECT CAS, CODE FROM substances"
) %>%
filter(CAS %in% measurements$CAS_No) %>%
mutate(CODE = tolower(CODE)) %>%
mutate(pest = str_detect(CODE, "pest"),
pharma = str_detect(CODE, "pharma"),
reach = str_detect(CODE, "reach")
) %>%
select(-CODE)
sub_groups <- sub_groups[!duplicated(sub_groups$CAS), ]
## joining data ##
data_tot <-
left_join(measurements_mapping,
measurements ,
by = c("station_co" = "Station_Code")) %>%
left_join(geo_hydro, by = "SUBID") %>%
left_join(catch, by = "SUBID") %>%
left_join(demo, by = c("SUBID" = "SC")) %>%
left_join(sub_props, by = c("CAS_No" = "CAS")) %>%
left_join(sub_groups, by = c("CAS_No" = "CAS"))
data <- data_tot %>%
select(
HAROID,
MAINDOWN,
SUBID,
CountryCorrFinal,
LAKEREGION,
REGION,
WQPARREG,
POURX,
POURY,
TARGETX,
TARGETY,
CENTERX,
CENTERY,
LATITUDE,
LONGITUDE,
station_co,
Substance,
CAS_No,
H_Unit,
Concentration,
subs_value,
valid_measurement,
kbiodeg,
log_kow,
molar_mass,
ks,
reach,
pest,
pharma,
AREA,
UPAREA,
RIVLEN,
ELEV_MEAN,
ELEV_STD,
SLOPE_MEAN,
RELIEF,
SLC_1:CumCat_km2,
GDPEP,
distance_t,
CumAreakkm2
) %>%
mutate(
subs_value = case_when(
H_Unit == "mg/l" ~ subs_value * 1000,
H_Unit == "mg/kg" ~ subs_value * 1000,
TRUE ~ subs_value
),
H_Unit = case_when(H_Unit == "mg/l" ~ "µg/l",
H_Unit == "mg/kg" ~ "µg/kg",
TRUE ~ H_Unit)
)
unique(data$H_Unit)
data <- data_tot %>%
select(
HAROID,
MAINDOWN,
SUBID,
CountryCorrFinal,
LAKEREGION,
REGION,
WQPARREG,
POURX,
POURY,
TARGETX,
TARGETY,
CENTERX,
CENTERY,
LATITUDE,
LONGITUDE,
station_co,
Substance,
CAS_No,
H_Unit,
Concentration,
subs_value,
valid_measurement,
kbiodeg,
log_kow,
molar_mass,
ks,
reach,
pest,
pharma,
AREA,
UPAREA,
RIVLEN,
ELEV_MEAN,
ELEV_STD,
SLOPE_MEAN,
RELIEF,
SLC_1:CumCat_km2,
GDPEP,
distance_t,
CumAreakkm2
) %>%
mutate(
subs_value = case_when(
H_Unit == "mg/l" ~ subs_value * 1000,
H_Unit == "mg/kg" ~ subs_value * 1000,
TRUE ~ subs_value
),
H_Unit = case_when(H_Unit == "mg/l" ~ "µg/l",
H_Unit == "mg/kg" ~ "µg/kg",
TRUE ~ H_Unit)
) %>%
filter(H_Unit != "µg/kg")
View(data)
unique(data$CountryCorrFinal)
read_excel(path = "data/raw/copy_locators_hypefinal_Nov2017.xlsx", sheet = "Countries")
read_excel(path = "data/raw/copy_locators_hypefinal_Nov2017.xlsx", sheet = "Countries") %>% colnames()
countries <- read_excel(path = "data/raw/copy_locators_hypefinal_Nov2017.xlsx", sheet = "Countries") %>%
rename(`Countries in Ehype` = country, country_nr = Nr) %>%
select(country, country_nr)
countries <- read_excel(path = "data/raw/copy_locators_hypefinal_Nov2017.xlsx", sheet = "Countries") %>%
rename(country = `Countries in Ehype`, country_nr = Nr) %>%
select(country, country_nr)
countries
demo
demo <- left_join(demo, countries, by = c("CountryCorrFinal" = "country"))
demo
filter(demo, is.na(country_nr))
read_excel(path = "data/raw/copy_locators_hypefinal_Nov2017.xlsx", sheet = "LU")
data
agrlu <- read_excel(path = "data/raw/copy_locators_hypefinal_Nov2017.xlsx", sheet = "LU")
agrlu
agrlu <- read_excel(path = "data/raw/copy_locators_hypefinal_Nov2017.xlsx", sheet = "LU") %>%
select(SUBID, Agr) %>%
rename(area_agr = Agr)
agrlu
demo
agrlu
demo <- left_join(demo, countries, by = c("CountryCorrFinal" = "country")) %>%
left_join(agrlu, by = c("SC" = "SUBID"))
# Kevin Ouwerkerk
# 2019-11-18
# Loading libraries -------------------------------------------------------
library(tidyverse)
library(readxl)
library(RSQLite)
# Loading data ------------------------------------------------------------
geo_hydro <- read_tsv("data/raw/GeoData.txt") %>%
filter(HAROID == 9600704)
catch <- read_excel("data/raw/NewHypeSchematisation.xlsx", sheet = "CumCat") %>%
select(SUBID, CumCat_km2)
measurements <-
read_excel(path = "data/raw/JDS_Query met pivot.xlsx", sheet = "DBQuery") %>%
filter(Sample_Matrix == "Water - Surface water", CAS_No != "N/A") %>%
select(
Station_Code,
Substance,
CAS_No,
H_Unit,
Concentration,
`Data value`,
`Valid measurement`
) %>%
rename(subs_value = `Data value`,
valid_measurement = `Valid measurement`)
measurements$H_Unit[measurements$H_Unit == "mg/L"] <- "mg/l"
measurements_mapping <- read_csv2(file = "data/raw/MappingJDS_Define.csv") %>%
filter(HAROID == 9600704) %>%
select(station_co, SUBID, distance_t, CumAreakkm2)
demo <- read_excel(path = "data/raw/copy_locators_hypefinal_Nov2017.xlsx", sheet = "locators") %>%
select(SC, CountryCorrFinal, GDPEP)
countries <- read_excel(path = "data/raw/copy_locators_hypefinal_Nov2017.xlsx", sheet = "Countries") %>%
rename(country = `Countries in Ehype`, country_nr = Nr) %>%
select(country, country_nr)
agrlu <- read_excel(path = "data/raw/copy_locators_hypefinal_Nov2017.xlsx", sheet = "LU") %>%
select(SUBID, Agr) %>%
rename(area_agr = Agr)
demo <- left_join(demo, countries, by = c("CountryCorrFinal" = "country")) %>%
left_join(agrlu, by = c("SC" = "SUBID"))
demo
source('P:/1209104-solutions/JDS_ML/github_repo_JDS_ML/JDS_ML/emerging_sub_worldbank_R/scripts/Cleaning_data.R', encoding = 'UTF-8', echo=TRUE)
summary(data$f_agr)
emission_files <- list.files(path = "data/modified/year_formats/", pattern = "*.dbg", full.names = TRUE)
emission_files <- list.files(path = "data/raw/emission-data/", pattern = "*.dbg", full.names = TRUE)
emission_files[1]
file <- "data/raw/emission-data/espaceCAS_100-41-4.dbg"
name <- read_tsv(file = file)
name
View(name)
emission_files <- list.files(path = "data/raw/emission-data/", pattern = "*.dbg", full.names = TRUE)
file <- "data/raw/emission-data/espaceCAS_100-41-4.dbg"
file
name <-
name <- read_tsv(file = file)
# Kevin Ouwerkerk
# 2019-11-18
# Loading libraries -------------------------------------------------------
library(tidyverse)
library(readxl)
library(RSQLite)
name <-
df <- read_tsv(file = file)
df
which(df$`Reading external data`== "Losses after extrapolation:")
df <- read_tsv(file = file)
skip <- which(df$`Reading external data`== "Losses after extrapolation:")
df[skip + 1 : , ]
df[skip + 1 : ]
skip
df[skip]
df[skip, ]
df[skip:-1, ]
df[-1:skip, ]
df[90:, ]
df[90: , ]
nrow(df)
df[c(90: nrow(df)), ]
df[-c(1: skip), ]
colnames(df) <- c("emission_air_raw", "emission_air_water", "emission_air_ww", "emission_air_soil", "unknown")
name <-
df <- read_tsv(file = file, skip = 1)
name <-
df <- read_tsv(file = file, skip = 2)
name <-
df <- read_fwf(file = file, skip = 2)
?read_fwf
name <-
df <- read_fwf(file = file, skip = 2, col_positions = fwf_positions())
df[1]
df[1,]
df[1,] %>% length()
name <-
df <- read_fwf(file = file, skip = 2, col_positions = fwf_widths(c(1, 8, 8, 8, 8, 8) , col_names = c("emission_air_raw", "emission_air_water", "emission_air_ww", "emission_air_soil", "unknown")))
name <-
df <- read_fwf(file = file, skip = 2, col_positions = fwf_widths(c(1, 2, 3, 4, 5, 6) , col_names = c("emission_air_raw", "emission_air_water", "emission_air_ww", "emission_air_soil", "unknown")))
name <-
df <- read_fwf(file = file, skip = 2, col_positions = fwf_widths(c(3, 8, 23, 38, 53, 68) , col_names = c("emission_air_raw", "emission_air_water", "emission_air_ww", "emission_air_soil", "unknown")))
df <- read_fwf(file = file, skip = 2, col_positions = fwf_widths(c(1, 12, 12, 12, 12, 12) , col_names = c("emission_air_raw", "emission_air_water", "emission_air_ww", "emission_air_soil", "unknown")))
df <- read_fwf(file = file, skip = 2, col_positions = fwf_positions(c(3,3)))
df <- read_fwf(file = file, skip = 2, col_positions = fwf_positions(c(3,4)))
df <- read_table(file = file, skip = 2)
df
read_table()
?read_table
df <- read_table(file = file, skip = 2,  col_names = FALSE)
df
df <- read_table2(file = file, skip = 2,  col_names = FALSE)
df
df <-
read_table2(
file = file,
skip = 2,
col_names = FALSE,
col_types =  cols(X1 = col_integer(),
X2 = col_double(),
X3 = col_double())
)
df
which(df$`Reading external data`== "Losses after extrapolation:")
View(df)
which(is.na(df$X1))
skip <- which(is.na(df$X1))
skip[2]
df[-c(1:skip[2]), ]
df <- df[-c(1:skip[2]), ]
colnames(df) <- c("country_nr" ,"emission_air_raw", "emission_air_water", "emission_air_ww", "emission_air_soil", "unknown")
df
emission_data <- NULL
emission_data <- bind_rows(emission_data, df)
emission_data
emission_files <- list.files(path = "data/raw/emission-data/", pattern = "*.dbg", full.names = TRUE)
emission_data <- NULL
# file <- "data/raw/emission-data/espaceCAS_100-41-4.dbg"
for (file in emission_files) {
df <-
read_table2(
file = file,
skip = 2,
col_names = FALSE,
col_types =  cols(X1 = col_integer(),
X2 = col_double(),
X3 = col_double())
)
skip <- which(is.na(df$X1))
df <- df[-c(1:skip[2]), ]
colnames(df) <- c("country_nr" ,"emission_air_raw", "emission_air_water", "emission_air_ww", "emission_air_soil", "unknown")
emission_data <- bind_rows(emission_data, df)
}
emission_data
file <- "data/raw/emission-data/espaceCAS_100-41-4.dbg"
str_view(file, "[.]")
cas <- str_view(file, "[.]")
cas
str_extract(file, "[.]")
str_extract(file, "$[.]")
str_extract(file, "^\d$[.]")
str_extract(file, "^\d")
str_extract(file, "\d")
str_extract(file, "^\\d$[.]")
str_extract(file, "^\\d")
grepl(file, "^\\d")
grep(file, "^\\d")
grep(file, "\\d")
str_extract(file, "\\d")
str_extract(file, "\\d")
sub(file, "\\d")
basename(file)
str_extract(basename(file), "\\d")
sub(x = basename(file), pattern = "\\d")
grep(basename(file), "\\d")
str_extract(basename(file), "\\d{3}")
str_extract(basename(file), "\\d{1,}")
str_extract(basename(file), "\\d{1,}-\\d{1,}-\\d{1,}")
str_extract(basename(file), "\\d{1,}-\\d{1,2}-\\d{1}")
cas <- str_extract(basename(file), "\\d{1,}-\\d{1,2}-\\d{1}")
df <-
read_table2(
file = file,
skip = 2,
col_names = FALSE,
col_types =  cols(X1 = col_integer(),
X2 = col_double(),
X3 = col_double())
)
skip <- which(is.na(df$X1))
df <- df[-c(1:skip[2]), ]
colnames(df) <- c("country_nr" ,"emission_air_raw", "emission_air_water", "emission_air_ww", "emission_air_soil", "unknown")
df$cas <- cas
df
source('P:/1209104-solutions/JDS_ML/github_repo_JDS_ML/JDS_ML/emerging_sub_worldbank_R/scripts/Cleaning_data.R', encoding = 'UTF-8', echo=TRUE)
emission_data
emission_data <- select(emission_data, country_nr, cas, emission_air_raw:unknown)
emission_data <- select(emission_data, country_nr, cas, emission_air_raw:unknown)
emission_data
summary(emission_data$unknown)
emission_data <- select(emission_data, country_nr, cas, emission_air_raw:emission_air_soil)
emission_data
str(data)
data <- left_join(data, emission_data, by = c("country_nr" = "country_nr" , "CAS_No" = "cas"))
names(data)
source('P:/1209104-solutions/JDS_ML/github_repo_JDS_ML/JDS_ML/emerging_sub_worldbank_R/scripts/Cleaning_data.R', encoding = 'UTF-8', echo=TRUE)
source('P:/1209104-solutions/JDS_ML/github_repo_JDS_ML/JDS_ML/emerging_sub_worldbank_R/scripts/Cleaning_data.R', encoding = 'UTF-8', echo=TRUE)
dt <- select(data, pest, pharma, reach)
dt
dt[is.na(dt), ]
dt[is.na(dt$pest), ]
dt[is.na(dt$reach), ]
dt[is.na(dt$pharma), ]
sub_groups
sub_groups <- dbGetQuery(
conn,
"SELECT CAS, CODE FROM substances"
) %>%
filter(CAS %in% measurements$CAS_No) %>%
mutate(CODE = tolower(CODE)) %>%
mutate(pest = str_detect(CODE, "pest"),
pharma = str_detect(CODE, "pharma"),
reach = str_detect(CODE, "reach")
)
filter(sub_groups, is.na(pest))
filter(sub_groups, is.na(reach))
sum(is.na(sub_groups$pest))
filter(data, is.na(pest))
filter(data, is.na(pest)) %>% select(CAS_No) %>% unique()
casmis <- filter(data, is.na(pest)) %>% select(CAS_No) %>% unique()
sub_groups$CAS %in% casmis
sub_groups$CAS %in% casmis %>% sum()
dt
dt <- mutate(dt, morepest = pest == TRUE & reach == TRUE | pharma == TRUE)
dt
dt <- mutate(dt, morepest = case_when(pest == TRUE & reach = TRUE ~ TRUE, pest == TRUE & pharma == TRUE ~ TRUE, TRUE ~ FALSE))
dt <- mutate(dt, morepest = case_when(pest == TRUE & reach == TRUE ~ TRUE, pest == TRUE & pharma == TRUE ~ TRUE, TRUE ~ FALSE))
dt
filter(dt, morepest == TRUE)
