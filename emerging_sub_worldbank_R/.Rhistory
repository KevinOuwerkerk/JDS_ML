"SELECT ID, CAS, property, value FROM substance_properties WHERE property IN ('Molar mass [Da]', 'log Kow', 'Kbiodeg [1/s]', 'Ks')"
) %>%
mutate(value = as.numeric(value)) %>%
filter(CAS %in% measurements$CAS_No) %>%
spread(key = property, value = value) %>%
select(CAS, `Kbiodeg [1/s]`, `log Kow`, `Molar mass [Da]`, Ks) %>%
group_by(CAS) %>%
summarise(
molar_mass = mean(`Molar mass [Da]`, na.rm = TRUE),
log_kow = mean(`log Kow`, na.rm = TRUE),
kbiodeg = mean(`Kbiodeg [1/s]`, na.rm = TRUE),
ks = mean(Ks, na.rm = TRUE)
) %>%
ungroup()
sub_groups <- dbGetQuery(
conn,
"SELECT CAS, CODE FROM substances"
) %>%
filter(CAS %in% measurements$CAS_No) %>%
mutate(CODE = tolower(CODE)) %>%
mutate(pest = str_detect(CODE, "pest"),
pharma = str_detect(CODE, "pharma"),
reach = str_detect(CODE, "reach")
) #%>%
# select(-CODE)
sub_groups <- sub_groups[!duplicated(sub_groups$CAS), ]
# Joining data  -----------------------------------------------------------
data_tot <-
left_join(measurements_mapping,
measurements ,
by = c("station_co" = "Station_Code")) %>%
left_join(geo_hydro, by = "SUBID") %>%
left_join(catch, by = "SUBID") %>%
left_join(demo, by = c("SUBID" = "SC")) %>%
left_join(sub_props, by = c("CAS_No" = "CAS")) %>%
left_join(sub_groups, by = c("CAS_No" = "CAS"))
data <- data_tot %>%
select(
HAROID,
MAINDOWN,
SUBID,
CountryCorrFinal,
country_nr,
LAKEREGION,
REGION,
WQPARREG,
POURX,
POURY,
TARGETX,
TARGETY,
CENTERX,
CENTERY,
LATITUDE,
LONGITUDE,
station_co,
Substance,
CAS_No,
H_Unit,
Concentration,
subs_value,
valid_measurement,
kbiodeg,
log_kow,
molar_mass,
ks,
reach,
pest,
pharma,
AREA,
area_agr,
UPAREA,
RIVLEN,
ELEV_MEAN,
ELEV_STD,
SLOPE_MEAN,
RELIEF,
SLC_1:CumCat_km2,
GDPEP,
frac_GDPEP,
distance_t,
CumAreakkm2
) %>%
mutate(  # recalculating units to one standard #
subs_value = case_when(
H_Unit == "mg/l" ~ subs_value * 1000,
H_Unit == "mg/kg" ~ subs_value * 1000,
TRUE ~ subs_value
),
H_Unit = case_when(H_Unit == "mg/l" ~ "µg/l",
H_Unit == "mg/kg" ~ "µg/kg",
TRUE ~ H_Unit)
) %>%
filter(H_Unit != "µg/kg")
# removing missing measurement
data <- data[!is.na(data$subs_value), ]
# calculate fraction agricultural are for each subid #
data <- mutate(data, f_agr = area_agr / AREA)
# adding flag for substances that belong to multiple groups
data$mult_groups <- rowSums(data[,c('reach', 'pharma', 'pest')], na.rm = TRUE)
# making sure that every substance only belongs to one group using priorities #
data <-
mutate(
data,
reach_bin = if_else(reach == TRUE & mult_groups == 1, 1 , 0),
pharma_bin = if_else(
pharma == TRUE & mult_groups == 1 | pharma == TRUE & pest != TRUE & mult_groups > 1,
1 , 0),
pest_bin = if_else(pest == TRUE, 1 , 0, missing = 0)
)
# making on column for the groups
data$sub_groups <- case_when(data$reach_bin == 1 ~ "reach",
data$pharma_bin == 1 ~ " pharma",
data$pest_bin == 1 ~ "pest")
# Obtaining emissions data ------------------------------------------------
emission_files <- list.files(path = "data/raw/emission-data/", pattern = "*.dbg", full.names = TRUE)
emission_data <- NULL
# file <- "data/raw/emission-data/espaceCAS_100-41-4.dbg"
for (file in emission_files) {
cas <- str_extract(basename(file), "\\d{1,}-\\d{1,2}-\\d{1}")
df <-
read_table2(
file = file,
skip = 2,
col_names = FALSE,
col_types =  cols(X1 = col_integer(),
X2 = col_double(),
X3 = col_double())
)
skip <- which(is.na(df$X1))
df <- df[-c(1:skip[2]), ]
colnames(df) <- c("country_nr" ,"emission_air_raw", "emission_water_raw", "emission_ww_raw", "emission_soil_raw", "unknown")
df$cas <- cas
emission_data <- bind_rows(emission_data, df)
}
# cleaning and joining emission data #
emission_data <- select(emission_data, country_nr, cas, emission_air_raw:emission_soil_raw)
data <- left_join(data, emission_data, by = c("country_nr" = "country_nr" , "CAS_No" = "cas"))
# calculating emissions based on substance group #
data <- mutate(
data,
emission_air = case_when(
pest_bin == 1 ~ emission_air_raw * f_agr,
pest_bin != 1 ~ emission_air_raw * frac_GDPEP
),
emission_water = case_when(
pest_bin == 1 ~ emission_water_raw * f_agr,
pest_bin != 1 ~ emission_water_raw * frac_GDPEP
),
emission_ww = case_when(
pest_bin == 1 ~ emission_ww_raw * f_agr,
pest_bin != 1 ~ emission_ww_raw * frac_GDPEP
),
emission_soil = case_when(
pest_bin == 1 ~ emission_soil_raw * f_agr,
pest_bin != 1 ~ emission_soil_raw * frac_GDPEP
)
)
# creating intermediate datset #
data_intermediate <- data
data
# create data for later use #
data <- select(
data,
-HAROID,
-REGION,
-MAINDOWN,
-LAKEDATAID,
-LAKE_DEPTH,  # always the same
-ICATCH,  # always the same
-loc_sp,
-loc_in,
-frac_GDPEP,
-f_agr,
-emission_air_raw,
-emission_water_raw,
-emission_ww_raw,
-emission_soil_raw,
-mult_groups,
-reach,
-pest,
-pharma,
-drydep_n2,  # drydep_n1 & drydep_n2 are the same?
-WQPARREG,  # always the same
-DHSLC_3,  # only 0 values for the variables below
-SLC_3,
-SLC_20,
-SLC_26,
-SLC_32,
-SLC_33,
-SLC_35,
-SLC_36,
-SLC_41,
-SLC_51,
-SLC_53,
-SLC_54,
-SLC_56,
-SLC_57,
-SLC_58,
-SLC_59,
-SLC_60,
-SLC_66,
-SLC_70,
-SLC_74,
-SLC_75
)
# Writing data to disk ----------------------------------------------------
# intermediate
write_csv2(data_intermediate, "data/modified/intermediate_data.csv")
write_rds(data_intermediate, "data/modified/intermediate_data.rds")
write_parquet(data_intermediate, sink = "data/modified/intermediate_data.parquet")
# for later use #
write_csv2(data, "data/modified/compact_data.csv")
write_rds(data, "data/modified/compact_data.rds")
write_parquet(data, "data/modified/compact_data.parquet")
# Loading libraries -------------------------------------------------------
library(FactoMineR)
library(factoextra)
library(paran)
library(psych)
library(Rtsne)
library(tidyverse)
# Loading data ------------------------------------------------------------
df <- read_rds("data/modified/compact_data.rds")
# PCA #
pca_df <-
select(
df,
-SUBID,
-CountryCorrFinal,
-country_nr,
-LAKEREGION,
-POURX,
-POURY,
-TARGETX,
-TARGETY,
-CENTERX,
-CENTERY,
-LATITUDE,
-LONGITUDE,
-station_co,
-Substance,
-CAS_No,
-CAS_No,
-H_Unit,
-Concentration,
-valid_measurement
)
pca_base_df <-
select(
pca_df,
-emission_air,
-emission_water,
-emission_ww,
-emission_soil,
-kbiodeg,
-log_kow,
-molar_mass,
-ks,
-sub_groups
)
?PCA
dbDisconnect()
pca_all <- PCA(pca_df, quanti.sup = 99:101, quali.sup = 102, graph = TRUE)
pca_base <- prcomp(pca_base_df, scale. = TRUE)
summary(pca_base_df)
source('P:/1209104-solutions/JDS_ML/github_repo_JDS_ML/JDS_ML/emerging_sub_worldbank_R/scripts/Cleaning_data.R', encoding = 'UTF-8', echo=TRUE)
source('P:/1209104-solutions/JDS_ML/github_repo_JDS_ML/JDS_ML/emerging_sub_worldbank_R/scripts/Cleaning_data.R', encoding = 'UTF-8', echo=TRUE)
# Loading libraries -------------------------------------------------------
library(FactoMineR)
library(factoextra)
library(paran)
library(psych)
library(Rtsne)
library(tidyverse)
# Loading data ------------------------------------------------------------
df <- read_rds("data/modified/compact_data.rds")
# PCA #
pca_df <-
select(
df,
-SUBID,
-CountryCorrFinal,
-country_nr,
-LAKEREGION,
-POURX,
-POURY,
-TARGETX,
-TARGETY,
-CENTERX,
-CENTERY,
-LATITUDE,
-LONGITUDE,
-station_co,
-Substance,
-CAS_No,
-CAS_No,
-H_Unit,
-Concentration,
-valid_measurement
)
pca_base_df <-
select(
pca_df,
-emission_air,
-emission_water,
-emission_ww,
-emission_soil,
-kbiodeg,
-log_kow,
-molar_mass,
-ks,
-sub_groups
)
pca_base <- prcomp(pca_base_df, scale. = TRUE)
names(pca_df)
pca_all <- PCA(pca_df, quanti.sup = 78:80, quali.sup = 81, graph = TRUE)
pca_base$sdev
pca_base$sdev ^2
pca_base$sdev ^2 %>% round(2)
pca_base$rotation
fviz_screeplot(pca_all, ncp = 20)
fviz_screeplot(pca_base, ncp = 20)
paran(pca_base, graph = TRUE)
paran(pca_base$x, graph = TRUE)
summary(pca_base)
pca_base$sdev 62
pca_base$sdev ^2
# Loading libraries -------------------------------------------------------
library(FactoMineR)
library(factoextra)
library(paran)
library(psych)
library(Rtsne)
library(tidyverse)
# Loading data ------------------------------------------------------------
df <- read_rds("data/modified/compact_data.rds")
# PCA #
pca_df <-
select(
df,
-SUBID,
-CountryCorrFinal,
-country_nr,
-LAKEREGION,
-POURX,
-POURY,
-TARGETX,
-TARGETY,
-CENTERX,
-CENTERY,
-LATITUDE,
-LONGITUDE,
-station_co,
-Substance,
-CAS_No,
-CAS_No,
-H_Unit,
-Concentration,
-valid_measurement
)
pca_base_df <-
select(
pca_df,
-emission_air,
-emission_water,
-emission_ww,
-emission_soil,
-kbiodeg,
-log_kow,
-molar_mass,
-ks,
-sub_groups
)
# Loading libraries -------------------------------------------------------
library(FactoMineR)
library(factoextra)
library(paran)
library(psych)
library(Rtsne)
library(tidyverse)
# Loading data ------------------------------------------------------------
df <- read_rds("data/modified/compact_data.rds")
df
glimpse(df)
source('P:/1209104-solutions/JDS_ML/github_repo_JDS_ML/JDS_ML/emerging_sub_worldbank_R/scripts/Cleaning_data.R', encoding = 'UTF-8', echo=TRUE)
# Loading libraries -------------------------------------------------------
library(tidyverse)
library(naniar)
library(vtreat)
library(ranger)
library(xgboost)
# Loading data ------------------------------------------------------------
df <- read_rds("data/modified/compact_data.rds")
# Cleaning data for feature table #
df <- select(df, -SUBID:-Concentration, -valid_measurement, -sub_groups)
# first test removing al missing values (for now) #
df <- na.omit(df)
# create test and training data #
N <- nrow(df)
target <- round(0.75 * N)
gp <- runif(N)
# splitting the data
df_train <- df[gp < 0.75, ]
df_test <- df[gp >= 0.75, ]
# Cross validation Plan #
nRows <- nrow(df)
splitPlan <- kWayCrossValidation(nRows, 3, NULL, NULL)
fmla <- as.formula("subs_value ~ .")
# test model  random forrest #
(subs_model_rf <-
ranger(
formula = fmla,
data = df_train,
num.trees = 500,
respect.unordered.factors = "order"
))
df_test$rf_pred <- predict(subs_model_rf, df_test)$predictions
# RMSE on test data
mutate(df_test, residual = subs_value - rf_pred) %>%
summarise(rmse = sqrt(mean(residual ^2)))
# plot model performance
ggplot(df_test, aes(x = rf_pred, y = subs_value)) +
geom_point() +
geom_abline()
rf_pred <- df_test$rf_pred
df_test <- select(df_test, -rf_pred)
# test model xgboost #
df_train_xg <- select(df_train, -subs_value)
df_test_xg <- select(df_test, -subs_value)
cv <-
xgb.cv(
data = as.matrix(df_train_xg),
label = df_train$subs_value,
nrounds = 100,
nfold = 5,
objective = "reg:linear",
eta = 0.3,
max_depth = 6,
early_stopping_rounds = 10,
verbose = 0
)
elog <- cv$evaluation_log
elog %>%
summarize(ntrees.train = which.min(train_rmse_mean),   # find the index of min (train_rmse_mean)
ntrees.test  = which.min(test_rmse_mean))
subs_model_xgb <- xgboost(data = as.matrix(df_train_xg),
label = df_train$subs_value,
nrounds = 15,
objective = "reg:linear",
eta = 0.3,
depth = 6,
verbose = 0)
df_test$xgb_pred <- predict(subs_model_xgb, as.matrix(df_test_xg))
mutate(df_test, residual = subs_value - xgb_pred) %>%
summarise(rmse = sqrt(mean(residual ^2)))
ggplot(df_test, aes(x = xgb_pred, y = subs_value)) +
geom_point() +
geom_abline()
df_test$rf_pred <- rf_pred
# check both models #
mutate(df_test, residual_rf = subs_value - rf_pred,
residual_xgb = subs_value - xgb_pred) %>%
summarise(rmse_rf = sqrt(mean(residual_rf ^2)),
rmse_xgb = sqrt(mean(residual_xgb ^2)))
library(caret)
install.packages("caret")
library(caret)
?trainControl
glmnet_control <- trainControl(
method = "cv",
number = 10,
)
glmnet_model <- train(
subs_value ~ .,
data = df_train,
method = "glmnet",
trControl = glmnet_control
)
glmnet_model <- train(
subs_value ~ .,
data = df_train,
method = "glmnet",
trControl = glmnet_control
)
glmnet_model
plot(glmnet_model)
glmnet_control <- trainControl(
method = "cv",
number = 10,
)
glmnet_grid <- expand.grid(
alpha = 0:1,
lambda = seq(0.0001, 0.1, length = 10)
)
# glmnet #
glmnet_control <- trainControl(
method = "cv",
number = 10,
)
glmnet_grid <- expand.grid(
alpha = 0:1,
lambda = seq(0.0001, 0.1, length = 10)
)
glmnet_model <- train(
subs_value ~ .,
data = df_train,
method = "glmnet",
tuneGrid = glmnet_grid,
trControl = glmnet_control
)
glmnet_model
glmnet_model %>% plot()
